template header
challengeRating
proficiencyBonus
armorClass
minHitPoints
maxHitPoints
attackBonus
minDamage
maxDamage
saveDc

package templates

import com.sbnz.crcalculator.facts.Monster;
import com.sbnz.crcalculator.facts.Action;
import com.sbnz.crcalculator.facts.Attack;

template "statistics-by-cr"

	rule "Determine proficiency bonus for challenge rating @{challengeRating}"
		when
			$m: Monster(challengeRating == @{challengeRating}) @Watch(challengeRating)
		then
			System.out.println("Determine proficiency bonus for challenge rating @{challengeRating} fired");
			modify ($m) { setProficiencyBonus(@{proficiencyBonus}) };
	end

	rule "Determine offensive challenge rating for damage @{minDamage}-@{maxDamage}" salience 1
		when
			$m: Monster($actions: actions, offensiveChallengeRating == null)
			forall(Action(averageDamage != null) from $actions)
			Number(intValue >= @{minDamage}, intValue <= @{maxDamage}) from accumulate(
				$action: Action(
					averageDamage != null
				) from $actions,
				max($action.getAverageDamage())
			)
		then
			System.out.println("Determine offensive challenge rating for damage @{minDamage}-@{maxDamage} fired");
			modify ($m) {setOffensiveChallengeRating((double)@{challengeRating})};
	end
	
	rule "Determine defensive challenge rating for hit points @{minHitPoints}-@{maxHitPoints}"
		when
			$m: Monster(averageHitPoints >= @{minHitPoints}, averageHitPoints <= @{maxHitPoints}, defensiveChallengeRating == null)
		then
			System.out.println("Determine defensive challenge rating for hit points @{minHitPoints}-@{maxHitPoints} fired");
			modify ($m) {setDefensiveChallengeRating((double)@{challengeRating})}
	end
	
end template