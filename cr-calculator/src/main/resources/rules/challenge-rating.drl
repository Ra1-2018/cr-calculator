package rules

import com.sbnz.crcalculator.facts.Monster;
import com.sbnz.crcalculator.facts.ChallengeRating;

query getMaxDamageAction(Monster m, Action $action)
	Number($n: intValue) from accumulate(
		$a: Action() from m.getActions,
		max($a.getAverageDamage())
	)
	$action:= Action(averageDamage == $n) from m.getActions()
end

query getOffensiveChallengeRating(Monster m, ChallengeRating $cr)
	getMaxDamageAction(m, $action;)
	ChallengeRating(minDamage <= $action.getAverageDamage(), maxDamage >= $action.getAverageDamage(), $o: ordinal, $ab: attackBonus)
	$cr:= ChallengeRating(ordinal == $o + ($action.getMostCommonAttackBonus() - $ab)/2)
end

query getDefensiveChallengeRating(Monster m, ChallengeRating $cr)
	ChallengeRating(minHitPoints <= m.getAverageHitPoints(), maxHitPoints >= m.getAverageHitPoints(), $o: ordinal, $ac: armorClass)
	$cr:= ChallengeRating(ordinal == $o + (m.getArmorClass() - $ac)/2)
end

query getChallengeRating(Monster m, ChallengeRating $cr)
	getDefensiveChallengeRating(m, $defCr;)
	getOffensiveChallengeRating(m, $offCr;)
	$cr:= ChallengeRating(ordinal == ($defCr.getOrdinal() + $offCr.getOrdinal())/2);
end

rule "Determine challenge rating"
agenda-group "recalculate"
when
	$m: Monster()
	getChallengeRating($m, $cr;)
then
	System.out.println("Determine challenge rating fired");
	modify ($m) {setChallengeRating($cr)};
end