package rules

import com.sbnz.crcalculator.facts.Monster;
import com.sbnz.crcalculator.facts.ChallengeRating;
import com.sbnz.crcalculator.facts.AttackType;

rule "Determine challenge rating" salience -1
	    when
	        $m: Monster() @Watch(actions)
	        finalChallengeRating($cr;)
	    then
	    	System.out.println("Challenge rating calculated to " + $cr.getValue());
	        modify ($m) { setChallengeRating($cr), setCalculated(true) };
end

query finalChallengeRating(ChallengeRating $cr)
	$m: Monster()
	offensiveChallengeRating($off;)
	defensiveChallengeRating($def;)
	getChallengeRating($cr, ($off.getOrdinal() + $def.getOrdinal())/2, $m.getChallengeRating();)
end

query getChallengeRating(ChallengeRating $cr, Integer expectedOrdinal, ChallengeRating currentChallengeRating)
	$cr := ChallengeRating(ordinal == expectedOrdinal, this != currentChallengeRating)
end

query maxDamageAction(Action $action)
	Monster($actions: actions)
	$action := Action($avg: averageDamage) from $actions
	not Action(averageDamage > $avg) from $actions
end

query dominantAttackBonus(Action action, Integer $attackBonus)
	Attack($attackBonus := attackBonus, type == AttackType.ATTACK_ROLL) from action.getAttacks()
	Number($sum: intValue) from accumulate(
		Attack(
			attackBonus == $attackBonus,
			type == AttackType.ATTACK_ROLL,
			$averageDamage: averageDamage
		) from action.getAttacks(),
		sum($averageDamage)
	)
	not (
		Attack($ab: attackBonus, type == AttackType.ATTACK_ROLL) from action.getAttacks() and
		Number(intValue > $sum) from accumulate(
			Attack(
				attackBonus == $ab,
				type == AttackType.ATTACK_ROLL,
				$avg: averageDamage
			) from action.getAttacks(),
			sum($avg)
		)
	)
end

query dominantSaveDc(Action action, Integer $saveDc)
	Attack($saveDc := saveDc, type == AttackType.SAVING_THROW) from action.getAttacks()
	Number($sum: intValue) from accumulate(
		Attack(
			saveDc == $saveDc,
			type == AttackType.SAVING_THROW,
			$averageDamage: averageDamage
		) from action.getAttacks(),
		sum($averageDamage)
	)
	not (
		Attack($dc: saveDc, type == AttackType.SAVING_THROW) from action.getAttacks() and
		Number(intValue > $sum) from accumulate(
			Attack(
				saveDc == $dc,
				type == AttackType.SAVING_THROW,
				$avg: averageDamage
			) from action.getAttacks(),
			sum($avg)
		)
	)
end

query baseOffensiveChallengeRating(ChallengeRating $cr, Action $action)
	maxDamageAction($action;)
	$cr := ChallengeRating(minDamage <= $action.getAverageDamage(), maxDamage >= $action.getAverageDamage())
end

query isAttackRollDominant(Action action)
	Number($sum: intValue) from accumulate (
		$savingThrow: Attack(
			type == AttackType.SAVING_THROW
		) from action.getAttacks(),
		sum($savingThrow.getAverageDamage())
	)
	Number(intValue >= $sum) from accumulate (
		$attackRoll: Attack(
			type == AttackType.ATTACK_ROLL
		) from action.getAttacks(),
		sum($attackRoll.getAverageDamage())
	)
end

query adjustedForAttackRoll(ChallengeRating $cr)
	baseOffensiveChallengeRating($base, $action;)
	isAttackRollDominant($action;)
	dominantAttackBonus($action, $attackBonus;)
	getChallengeRating($cr, $base.getOrdinal() + ($attackBonus - $base.getAttackBonus())/2, null;)
end

query adjustedForSavingThrow(ChallengeRating $cr)
	baseOffensiveChallengeRating($base, $action;)
	not isAttackRollDominant($action;)
	dominantSaveDc($action, $saveDc;)
	getChallengeRating($cr, $base.getOrdinal() + ($saveDc - $base.getSaveDc())/2, null;)
end

query offensiveChallengeRating(ChallengeRating $cr)
	adjustedForAttackRoll($cr;) or
	adjustedForSavingThrow($cr;)
end

query defensiveChallengeRating(ChallengeRating $cr)
	$m: Monster($hp: averageHitPoints) and
	ChallengeRating(minHitPoints <= $hp, maxHitPoints >= $hp, $ac: armorClass, $o: ordinal) and
	getChallengeRating($cr, $o + ($m.getArmorClass() - $ac)/2, null;)
end